{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\souy\\\\Desktop\\\\best website\\\\frontend\\\\src\\\\pages\\\\QueuePage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { io } from 'socket.io-client';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000');\nconst QueuePage = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    tournamentId\n  } = useParams();\n  const [statusMessage, setStatusMessage] = useState('Click to join the queue.');\n  const [isInQueue, setIsInQueue] = useState(false);\n  const [isInMatch, setIsInMatch] = useState(false);\n  useEffect(() => {\n    const user = JSON.parse(sessionStorage.getItem('userData'));\n    if (!user) {\n      navigate('/login');\n      return;\n    }\n    const checkUserStatus = async () => {\n      try {\n        const {\n          data\n        } = await axios.get('http://localhost:5000/matchmaking/status', {\n          params: {\n            username: user.username\n          }\n        });\n        if (data.status === 'inGame') {\n          setIsInMatch(true);\n          setStatusMessage('⚠️ You are already in a match!');\n        } else if (data.status === 'inQueue') {\n          setIsInQueue(true);\n          setStatusMessage('✅ You are in the queue.');\n        }\n      } catch (error) {\n        console.error('Error checking status:', error.message);\n      }\n    };\n    checkUserStatus();\n    socket.on('matchFound', data => {\n      sessionStorage.setItem('currentMatch', JSON.stringify(data));\n      navigate(`/match/${data.matchId}`, {\n        state: {\n          self: data.self,\n          opponent: data.opponent\n        }\n      });\n    });\n    return () => {\n      socket.off('matchFound');\n    };\n  }, [navigate]);\n  const handleJoinQueue = async () => {\n    const user = JSON.parse(sessionStorage.getItem('userData'));\n    if (!user) {\n      setStatusMessage('⚠️ You must be logged in to join.');\n      return;\n    }\n    try {\n      const {\n        data\n      } = await axios.get('http://localhost:5000/matchmaking/status', {\n        params: {\n          username: user.username\n        }\n      });\n      if (data.status === 'inGame') {\n        setStatusMessage('⚠️ You are already in a game!');\n        navigate('/current-game');\n      } else if (data.status === 'inQueue') {\n        setStatusMessage('✅ You are already in the queue.');\n      } else {\n        socket.emit('joinQueue', {\n          username: user.username,\n          discordId: user.discordId,\n          epicName: user.epicName,\n          tournamentId\n        });\n        setIsInQueue(true);\n        setStatusMessage('✅ You joined the queue.');\n      }\n    } catch (error) {\n      console.error('Error joining queue:', error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center',\n      marginTop: '50px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: statusMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), !isInQueue && !isInMatch && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleJoinQueue,\n      children: \"Join Queue\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 36\n    }, this), isInQueue && /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: true,\n      children: \"Waiting for match...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 21\n    }, this), isInMatch && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate('/current-game'),\n      children: \"Go to Current Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n_s(QueuePage, \"onyASHFBVbM1qL+Fg9wH21T52tE=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = QueuePage;\nexport default QueuePage;\nvar _c;\n$RefreshReg$(_c, \"QueuePage\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useParams","io","axios","jsxDEV","_jsxDEV","socket","QueuePage","_s","navigate","tournamentId","statusMessage","setStatusMessage","isInQueue","setIsInQueue","isInMatch","setIsInMatch","user","JSON","parse","sessionStorage","getItem","checkUserStatus","data","get","params","username","status","error","console","message","on","setItem","stringify","matchId","state","self","opponent","off","handleJoinQueue","emit","discordId","epicName","style","textAlign","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/souy/Desktop/best website/frontend/src/pages/QueuePage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { io } from 'socket.io-client';\r\nimport axios from 'axios';\r\n\r\nconst socket = io('http://localhost:5000');\r\n\r\nconst QueuePage = () => {\r\n  const navigate = useNavigate();\r\n  const { tournamentId } = useParams();\r\n  const [statusMessage, setStatusMessage] = useState('Click to join the queue.');\r\n  const [isInQueue, setIsInQueue] = useState(false);\r\n  const [isInMatch, setIsInMatch] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const user = JSON.parse(sessionStorage.getItem('userData'));\r\n    if (!user) {\r\n      navigate('/login');\r\n      return;\r\n    }\r\n\r\n    const checkUserStatus = async () => {\r\n      try {\r\n        const { data } = await axios.get('http://localhost:5000/matchmaking/status', {\r\n          params: { username: user.username },\r\n        });\r\n\r\n        if (data.status === 'inGame') {\r\n          setIsInMatch(true);\r\n          setStatusMessage('⚠️ You are already in a match!');\r\n        } else if (data.status === 'inQueue') {\r\n          setIsInQueue(true);\r\n          setStatusMessage('✅ You are in the queue.');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error checking status:', error.message);\r\n      }\r\n    };\r\n\r\n    checkUserStatus();\r\n\r\n    socket.on('matchFound', (data) => {\r\n      sessionStorage.setItem('currentMatch', JSON.stringify(data));\r\n      navigate(`/match/${data.matchId}`, { state: { self: data.self, opponent: data.opponent } });\r\n    });\r\n\r\n    return () => {\r\n      socket.off('matchFound');\r\n    };\r\n  }, [navigate]);\r\n\r\n  const handleJoinQueue = async () => {\r\n    const user = JSON.parse(sessionStorage.getItem('userData'));\r\n    if (!user) {\r\n      setStatusMessage('⚠️ You must be logged in to join.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const { data } = await axios.get('http://localhost:5000/matchmaking/status', {\r\n        params: { username: user.username },\r\n      });\r\n\r\n      if (data.status === 'inGame') {\r\n        setStatusMessage('⚠️ You are already in a game!');\r\n        navigate('/current-game');\r\n      } else if (data.status === 'inQueue') {\r\n        setStatusMessage('✅ You are already in the queue.');\r\n      } else {\r\n        socket.emit('joinQueue', {\r\n          username: user.username,\r\n          discordId: user.discordId,\r\n          epicName: user.epicName,\r\n          tournamentId,\r\n        });\r\n        setIsInQueue(true);\r\n        setStatusMessage('✅ You joined the queue.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error joining queue:', error.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center', marginTop: '50px' }}>\r\n      <h2>{statusMessage}</h2>\r\n      {!isInQueue && !isInMatch && <button onClick={handleJoinQueue}>Join Queue</button>}\r\n      {isInQueue && <button disabled>Waiting for match...</button>}\r\n      {isInMatch && <button onClick={() => navigate('/current-game')}>Go to Current Game</button>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QueuePage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}