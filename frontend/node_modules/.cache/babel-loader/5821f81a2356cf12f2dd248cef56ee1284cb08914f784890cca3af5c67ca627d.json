{"ast":null,"code":"// Updated Backend Socket Logic (app.js)\nconst express = require('express');\nconst http = require('http');\nconst socketIo = require('socket.io');\nconst cors = require('cors');\nconst bodyParser = require('body-parser');\nrequire('dotenv').config();\nconst connectDB = require('./utils/db');\n\n// Import routes\nconst authRoutes = require('./routes/auth');\nconst accountRoutes = require('./routes/account');\nconst tournamentRoutes = require('./routes/tournament');\nconst matchmakingRoutes = require('./routes/matchmaking');\nconst matchRoutes = require('./routes/match');\n\n// Initialize app and server\nconst app = express();\nconst server = http.createServer(app);\nconst io = socketIo(server, {\n  cors: {\n    origin: '*',\n    methods: ['GET', 'POST']\n  }\n});\n\n// Middleware\napp.use(cors());\napp.use(bodyParser.json());\n\n// Connect to MongoDB\nconnectDB();\n\n// Routes\napp.use('/auth', authRoutes);\napp.use('/account', accountRoutes);\napp.use('/tournament', tournamentRoutes);\napp.use('/matchmaking', matchmakingRoutes);\napp.use('/match', matchRoutes);\n\n// Matchmaking logic\nlet queue = []; // Players waiting to be matched\nconst matches = {}; // Active matches\n\nio.on('connection', socket => {\n  console.log(`User connected: ${socket.id}`);\n\n  // Handle player joining the queue\n  socket.on('joinQueue', ({\n    username,\n    discordId,\n    epicName,\n    tournamentId\n  }) => {\n    if (!username || !tournamentId) {\n      socket.emit('error', {\n        message: 'Username and Tournament ID are required to join the queue.'\n      });\n      return;\n    }\n\n    // Fetch Discord avatar URL\n    const avatarUrl = discordId ? `https://cdn.discordapp.com/avatars/${discordId}/${discordId}.png` : '/default-avatar.png'; // Fallback avatar\n\n    queue.push({\n      id: socket.id,\n      username,\n      epicName,\n      avatarUrl,\n      tournamentId\n    });\n\n    // Check for a match\n    const tournamentQueue = queue.filter(player => player.tournamentId === tournamentId);\n    if (tournamentQueue.length >= 2) {\n      const [player1, player2] = tournamentQueue.splice(0, 2);\n      const matchId = `${player1.id}-${player2.id}`;\n      matches[matchId] = {\n        player1,\n        player2\n      };\n\n      // Create a room for the match\n      const room = `match-${matchId}`;\n      socket.join(room);\n      io.to(player1.id).emit('matchFound', {\n        matchId,\n        self: player1,\n        opponent: player2\n      });\n      io.to(player2.id).emit('matchFound', {\n        matchId,\n        self: player2,\n        opponent: player1\n      });\n      console.log(`Match created: ${player1.epicName} vs ${player2.epicName}`);\n    } else {\n      socket.emit('waiting', {\n        message: 'Waiting for another player to join...'\n      });\n    }\n  });\n\n  // Handle chat messages\n  socket.on('sendMessage', ({\n    matchId,\n    message,\n    sender\n  }) => {\n    const room = `match-${matchId}`;\n    io.to(room).emit('receiveMessage', {\n      sender,\n      message\n    });\n  });\n\n  // Handle player leaving the queue\n  socket.on('leaveQueue', ({\n    username,\n    tournamentId\n  }) => {\n    console.log(`${username} left the queue for tournament ${tournamentId}`);\n    queue = queue.filter(player => player.id !== socket.id);\n    socket.emit('queueLeft', {\n      message: 'You have left the queue.'\n    });\n  });\n\n  // Handle disconnect\n  socket.on('disconnect', () => {\n    console.log(`User disconnected: ${socket.id}`);\n    queue = queue.filter(player => player.id !== socket.id);\n\n    // Remove disconnected player from matches\n    for (const matchId in matches) {\n      if (matches[matchId].player1.id === socket.id || matches[matchId].player2.id === socket.id) {\n        delete matches[matchId];\n        console.log(`Match ${matchId} canceled due to player disconnect.`);\n      }\n    }\n  });\n});\n\n// Start the server\nconst PORT = process.env.PORT || 5000;\nserver.listen(PORT, () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});","map":{"version":3,"names":["express","require","http","socketIo","cors","bodyParser","config","connectDB","authRoutes","accountRoutes","tournamentRoutes","matchmakingRoutes","matchRoutes","app","server","createServer","io","origin","methods","use","json","queue","matches","on","socket","console","log","id","username","discordId","epicName","tournamentId","emit","message","avatarUrl","push","tournamentQueue","filter","player","length","player1","player2","splice","matchId","room","join","to","self","opponent","sender","PORT","process","env","listen"],"sources":["C:/Users/souy/Desktop/best website/best website/frontend/src/pages/MatchPage.js"],"sourcesContent":["// Updated Backend Socket Logic (app.js)\r\nconst express = require('express');\r\nconst http = require('http');\r\nconst socketIo = require('socket.io');\r\nconst cors = require('cors');\r\nconst bodyParser = require('body-parser');\r\nrequire('dotenv').config();\r\n\r\nconst connectDB = require('./utils/db');\r\n\r\n// Import routes\r\nconst authRoutes = require('./routes/auth');\r\nconst accountRoutes = require('./routes/account');\r\nconst tournamentRoutes = require('./routes/tournament');\r\nconst matchmakingRoutes = require('./routes/matchmaking');\r\nconst matchRoutes = require('./routes/match');\r\n\r\n// Initialize app and server\r\nconst app = express();\r\nconst server = http.createServer(app);\r\nconst io = socketIo(server, {\r\n  cors: {\r\n    origin: '*',\r\n    methods: ['GET', 'POST'],\r\n  },\r\n});\r\n\r\n// Middleware\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\n\r\n// Connect to MongoDB\r\nconnectDB();\r\n\r\n// Routes\r\napp.use('/auth', authRoutes);\r\napp.use('/account', accountRoutes);\r\napp.use('/tournament', tournamentRoutes);\r\napp.use('/matchmaking', matchmakingRoutes);\r\napp.use('/match', matchRoutes);\r\n\r\n// Matchmaking logic\r\nlet queue = []; // Players waiting to be matched\r\nconst matches = {}; // Active matches\r\n\r\nio.on('connection', (socket) => {\r\n  console.log(`User connected: ${socket.id}`);\r\n\r\n  // Handle player joining the queue\r\n  socket.on('joinQueue', ({ username, discordId, epicName, tournamentId }) => {\r\n    if (!username || !tournamentId) {\r\n      socket.emit('error', { message: 'Username and Tournament ID are required to join the queue.' });\r\n      return;\r\n    }\r\n\r\n    // Fetch Discord avatar URL\r\n    const avatarUrl = discordId\r\n      ? `https://cdn.discordapp.com/avatars/${discordId}/${discordId}.png`\r\n      : '/default-avatar.png'; // Fallback avatar\r\n\r\n    queue.push({ id: socket.id, username, epicName, avatarUrl, tournamentId });\r\n\r\n    // Check for a match\r\n    const tournamentQueue = queue.filter((player) => player.tournamentId === tournamentId);\r\n    if (tournamentQueue.length >= 2) {\r\n      const [player1, player2] = tournamentQueue.splice(0, 2);\r\n      const matchId = `${player1.id}-${player2.id}`;\r\n      matches[matchId] = { player1, player2 };\r\n\r\n      // Create a room for the match\r\n      const room = `match-${matchId}`;\r\n      socket.join(room);\r\n      io.to(player1.id).emit('matchFound', {\r\n        matchId,\r\n        self: player1,\r\n        opponent: player2,\r\n      });\r\n      io.to(player2.id).emit('matchFound', {\r\n        matchId,\r\n        self: player2,\r\n        opponent: player1,\r\n      });\r\n\r\n      console.log(`Match created: ${player1.epicName} vs ${player2.epicName}`);\r\n    } else {\r\n      socket.emit('waiting', { message: 'Waiting for another player to join...' });\r\n    }\r\n  });\r\n\r\n  // Handle chat messages\r\n  socket.on('sendMessage', ({ matchId, message, sender }) => {\r\n    const room = `match-${matchId}`;\r\n    io.to(room).emit('receiveMessage', { sender, message });\r\n  });\r\n\r\n  // Handle player leaving the queue\r\n  socket.on('leaveQueue', ({ username, tournamentId }) => {\r\n    console.log(`${username} left the queue for tournament ${tournamentId}`);\r\n    queue = queue.filter((player) => player.id !== socket.id);\r\n    socket.emit('queueLeft', { message: 'You have left the queue.' });\r\n  });\r\n\r\n  // Handle disconnect\r\n  socket.on('disconnect', () => {\r\n    console.log(`User disconnected: ${socket.id}`);\r\n    queue = queue.filter((player) => player.id !== socket.id);\r\n\r\n    // Remove disconnected player from matches\r\n    for (const matchId in matches) {\r\n      if (matches[matchId].player1.id === socket.id || matches[matchId].player2.id === socket.id) {\r\n        delete matches[matchId];\r\n        console.log(`Match ${matchId} canceled due to player disconnect.`);\r\n      }\r\n    }\r\n  });\r\n});\r\n\r\n// Start the server\r\nconst PORT = process.env.PORT || 5000;\r\nserver.listen(PORT, () => {\r\n  console.log(`Server running on http://localhost:${PORT}`);\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}